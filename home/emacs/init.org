#+STARTUP: fold

* header
#+begin_src emacs-lisp :tangle yes
  ;;; init.el --- My Castle -*- lexical-binding: t -*-
#+end_src
歴史軽
* package for customize
nix: epkgs.hydra
nix: epkgs.leaf
nix: epkgs.reformatter
* macro for customize
** add-hook-lambda
add-hookの度に一々クォートとラムダ書くのがだるい
#+begin_src emacs-lisp :tangle yes
  (defmacro add-hook-lambda (hook &rest body)
    (declare (indent defun))
    `(add-hook ',hook (lambda () ,@body)))
#+end_src
** eval-when-compile枠
バイトコンパイルの時だけ欲しいやつ
*** 1. header
#+begin_src emacs-lisp :tangle yes
  (eval-when-compile
#+end_src
*** 2. body
**** evil-mode
evil-define-keyがマクロらしい
#+begin_src emacs-lisp :tangle yes
  (require 'evil-core)
#+end_src
**** transient
transient-define-prefixの呼び出し時にrequireするコードを吐いておく
#+begin_src emacs-lisp :tangle yes
  (require 'transient)
  (advice-add
   #'transient-define-prefix
   :filter-return
   #'(lambda (expr)
       `(progn
          (require 'transient)
          ,expr)))
#+end_src
*** 3. footer
#+begin_src emacs-lisp :tangle yes
  )
#+end_src
** reformatter
#+begin_src emacs-lisp :tangle yes
  (defmacro reformatter-hook (hook name &rest reformatter-args)
    (declare (indent defun))
    `(add-hook-lambda ,hook
       (require 'reformatter) ;; require load reformatter when executed byte compiled function
       (reformatter-define
         ,name
         ,@reformatter-args)))
#+end_src
* basic
leaf.elで設定したい
nix: epkgs.leaf
** indent/tab
#+begin_src emacs-lisp :tangle yes
  (setq-default indent-tabs-mode nil)
#+end_src
** org-mode
*** hydra-org-view
#+begin_src emacs-lisp :tangle yes
  (leaf org
    :defer-config
    (defun my/org-restart ()
      (interactive)
      (save-excursion
        (org-mode-restart))
      (org-reveal))
    ;; vim-fernみたいに上の階層の見出しを閉じる
    (defun my/org-fern-hide ()
      (interactive)
      (let ((current (point)))
        (ignore-errors (outline-up-heading 0))
        (when (eql current (point))
          (ignore-errors (outline-up-heading 1))))
      (org-fold-hide-subtree))
    (defun my/org-fern-collapse ()
      (interactive)
      (org-cycle)
      (forward-line))
    (transient-define-prefix my/org-heading-menu ()
      :transient-suffix 'transient--do-stay
      :transient-non-suffix 'transient--do-quit
      [("TAB" "cycle" org-cycle)
       ("c" "cd" cd)
       ("f" "find by consult" consult-org-heading)
       ("h" "fern like hide" my/org-fern-hide)
       ("j" "next" outline-next-visible-heading)
       ("k" "previous" outline-previous-visible-heading)
       ("l" "fern like collapse" my/org-fern-collapse)
       ("s" "sort" org-sort)
       ("r" "restart" org-mode-restart)])
    :bind
    ((org-mode-map
      ("C-;" . my/org-heading-menu))))
#+end_src

#+begin_src emacs-lisp
  (leaf org
    :defer-config
    (defhydra
      hydra-org-shortcuts (org-mode-map "C-;")
      ("h" org-metaleft)
      ("j" org-metadown)
      ("k" org-metaup)
      ("l" org-metaright)
      ("v" hydra-org-view/body :exit t)
      ("SPC" (lambda ()
               (interactive)
               (move-end-of-line nil)
               (org-meta-return)))))
#+end_src
** theme
nix: epkgs.catppuccin-theme
#+begin_src emacs-lisp :tangle yes
  (load-theme 'catppuccin t)
#+end_src
** サクッと実験するために/tmp/init.elがあれば読み込むようにする
壊れてるケースがあるので最後に読むことにする
#+begin_src emacs-lisp :tangle yes
  (leaf init
    :hook
    (emacs-startup-hook
     . (lambda ()
         (when (and (not (daemonp)) (file-readable-p "/tmp/init.el"))
           (load-file "/tmp/init.el")))))
#+end_src
** バックアップ系の無効化
#+begin_src emacs-lisp :tangle yes
  (leaf backup
    :setq ((make-backup-files . nil)
           (auto-save-default . nil)
           (auto-save-list-file-prefix . nil)
           (create-lockfiles . nil)))
#+end_src
** 括弧の補完
#+begin_src emacs-lisp :tangle yes
  (electric-pair-mode)
#+end_src
** 日本語でやっていく
https://hylom.net/2020/11/23/emacs-settings-to-use-japanese-font/ より
#+begin_src emacs-lisp :tangle yes
  (set-language-environment "Japanese")
  (let ((font "Noto Sans Mono CJK JP"))
    (set-frame-font font)
    (add-to-list 'default-frame-alist (cons 'font font)))
#+end_src
** 画面を広くする
テキストエディタが広いことは大事だと思います!
#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
#+end_src
** 起動画面の無効化
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-startup-screen t)
#+end_src
* daemon only
** 色々と遅いのでpreloadしておく
#+begin_src emacs-lisp :tangle yes
  (when (daemonp)
    (with-temp-buffer
      (org-mode)
      (ignore-errors (magit))
      ))
#+end_src
* commands
** command-output
#+begin_src emacs-lisp :tangle yes
  (defun my/command-output (cmd &rest args)
    (with-temp-buffer
      (apply 'call-process `(,cmd nil t nil ,@args))
      (split-string (buffer-string) "\n" t)))
#+end_src
** indent-buffer
#+begin_src emacs-lisp :tangle yes
  (defun my/indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max))
      (untabify (point-min) (point-max))))
  (leaf my/indent-buffer
    :bind (("C-c i" . my/indent-buffer)))
#+end_src
** kill-all-buffers
全バッファを終了する
#+begin_src emacs-lisp :tangle yes
  (defun my/kill-all-buffers ()
    (interactive)
    (mapcar #'kill-buffer (buffer-list)))
#+end_src
* packages
** consult
nix: epkgs.consult
#+begin_src emacs-lisp :tangle yes
  (defun my/consult-menu ()
    (interactive)
    (transient-define-prefix my/consult-menu ()
      [("w" "Most Recently Written" consult-mrw)
       ("rw" "Project MRW by ripgrep" consult-project-mrw)])
    (my/consult-menu))
  (keymap-global-set "M-c" #'my/consult-menu) ;; orig: capitalize-word
  ;; isearch中にC-c押したら開始するようにしてみる
  (keymap-set isearch-mode-map "C-c" #'consult-line)
#+end_src
*** file-external
コマンド列を投げ込んでmy/command-outputに通して結果をファイルリストとしてconsultに投げる
cwdはwith-temp-bufferとか使って外でいじってくれ方針
#+begin_src emacs-lisp :tangle yes
  (defun consult--file-external (&rest cmdargs)
    (require 'consult)
    (consult--read
     (apply #'my/command-output cmdargs)
     :category 'file
     :require-match t
     :state (consult--file-preview)
     :sort nil))
#+end_src
*** project-mrw
#+begin_src emacs-lisp :tangle yes
  (defun consult-project-mrw ()
    (interactive)
    (find-file
     (with-temp-buffer
       (require 'project)
       (setq-local default-directory (project-root (project-current t)))
       (file-truename (consult--file-external "rg" "--files" "--sortr=modified")))))
#+end_src
** corfu
nix: epkgs.corfu
nix: epkgs.hotfuzz
[[https://qiita.com/keita44_f4/items/12a4a7081b0092eaca94][このへん]]参考にした
https://github.com/yonta/dotfiles/blob/7c53daf87f78f721919bb3c3cc3a6fcd0a2b2b2d/.config/emacs/lisp/init_package.el#L371
#+begin_src emacs-lisp :tangle yes
  (leaf corfu
    :custom
    (corfu-auto . t)
    (corfu-auto-delay . 0.1)
    (corfu-auto-prefix . 1)
    (corfu-preselect . 'prompt)
    ;; Emacs 30で死ぬようになったので切る
    (text-mode-ispell-word-completion . nil)
    :hook
    (corfu-mode-hook
     . (lambda () (setq-local completion-styles '(hotfuzz))))
    :config
    (global-corfu-mode))
  (add-hook
   'emacs-startup-hook
   (lambda ()
     (require 'corfu)))
#+end_src
** evil-mode
nix: epkgs.evil
#+begin_src emacs-lisp :tangle yes
  (leaf evil
    :custom
    (evil-move-beyond-eol . t) ;; virtualedit=onemore相当
    :require evil
    :global-minor-mode evil-mode
    :defer-config
    (evil-define-key 'normal 'global-map (kbd "SPC s")
      (lambda ()
        (interactive)
        ;; 今使える保存コマンドを引っ張り出す
        ;; 例えばorgのedit-specialがあるのでこうじゃないとだめ
        (call-interactively (key-binding (kbd "C-x C-s"))))))
#+end_src
** ddskk
nix: epkgs.ddskk
辞書の設定は.skk.elに記述している
#+begin_src emacs-lisp :tangle yes
  (leaf ddskk
    :bind (("C-x C-j" . skk-mode)))

  ;; キーリマッパーで変換と無変換を矢印キーにしている
  ;; Macみたいなスタイルで切り替えられるのがベネ
  (keymap-global-set "<left>" (lambda () (interactive) (skk-mode -1)))
  (keymap-global-set "<right>" (lambda () (interactive) (skk-mode 1)))
  ;;; Isearch setting.
  ;; skk-setup.elが無いのでhttps://github.com/skk-dev/ddskk/blob/master/skk-setup.el.inからコピペ
  (defun skk-isearch-setup-maybe ()
    (require 'skk-vars)
    (when (or (eq skk-isearch-mode-enable 'always)
              (and (boundp 'skk-mode)
                   skk-mode
                   skk-isearch-mode-enable))
      (skk-isearch-mode-setup)))

  (defun skk-isearch-cleanup-maybe ()
    (require 'skk-vars)
    (when (and (featurep 'skk-isearch)
               skk-isearch-mode-enable)
      (skk-isearch-mode-cleanup)))

  (add-hook 'isearch-mode-hook #'skk-isearch-setup-maybe)
  (add-hook 'isearch-mode-end-hook #'skk-isearch-cleanup-maybe)
#+end_src
*** sticky key無いと生きていけない
#+begin_src emacs-lisp :tangle yes
  (setq skk-sticky-key ";")
#+end_src
*** AZIKを使っていく
#+begin_src emacs-lisp :tangle yes
  (setq skk-use-azik t)
  (setq skk-azik-keyboard-type 'us101)
  (add-hook
   'skk-azik-load-hook
   (lambda ()
     ;; 「l」を「っ」にするので「や*っ」のようなパターンを正しく扱うために変換ポイントのパターンに足す
     (setq skk-set-henkan-point-key
           (append '(?L) skk-set-henkan-point-key))
     (let ((my-rules
            '(
              ;; AZIK使用時に";"をsticky-keyにして「っ」を「l」に退避する設定
              (";" nil skk-sticky-set-henkan-point)
              ("l" nil ("ッ" . "っ"))
              ;; 「ん」のshorthandは使わないのでqでカタカナになってほしいし鉤括弧もちゃんと打ててほしい
              ("q" nil skk-toggle-characters)
              ("[" nil "「")
              ;; 「'」で一時解除
              ("'" nil skk-latin-mode)
              )))
       (setq skk-rule-tree
             (skk-compile-rule-list
              skk-rom-kana-base-rule-list
              skk-rom-kana-rule-list
              my-rules)))))
#+end_src
*** ddskk-posframe
nix: epkgs.ddskk-posframe
[[https://emacs-jp.github.io/packages/ddskk-posframe][ddskkツールチップposframeフロントエンド]]
#+begin_src emacs-lisp :tangle yes
  (autoload 'ddskk-posframe-mode "ddskk-posframe")
  (add-hook 'skk-mode-hook #'ddskk-posframe-mode)
#+end_src
** embark
nix: epkgs.embark
nix: epkgs.embark-consult
#+begin_src emacs-lisp :tangle yes
  (leaf embark
    :bind
    ("C-." . embark-act)
    :defer-config
    ;; describe-functionの選択中にembarkでfind-functionできるようにする
    (setq embark-symbol-help-map (make-sparse-keymap))
    (keymap-set embark-symbol-help-map "f" 'find-function)
    (add-to-list 'embark-keymap-alist '(symbol-help embark-symbol-help-map)))
#+end_src
** expand-region
nix: epkgs.expand-region
** magit
nix: epkgs.magit
*** 全画面でmagitするやつ(magit-full)
[[http://k2nr.me/blog/2014/12/22/emacs-magit.html]]より
#+begin_src emacs-lisp :tangle yes
  (defun my/magit-full ()
    (interactive)
    (window-configuration-to-register :magit-full)
    (magit)
    (delete-other-windows))
#+end_src
*** 明示的にrefreshした際にsectionの開閉を元に戻す(magit-refresh)
#+begin_src emacs-lisp :tangle yes
  (defun my/magit-refresh ()
    (interactive)
    (setq magit-section-visibility-cache nil)
    (magit-refresh)
    (goto-char 0)
    (search-forward "\n\n") ;; 最初の段落に移動
    )
#+end_src
*** leaf
#+begin_src emacs-lisp :tangle yes
  (leaf magit
    :custom
    (magit-diff-refine-hunk . t)
    :bind
    ("C-c g" . my/magit-full)
    (magit-status-mode-map
     ("g" . my/magit-refresh)))
#+end_src
** mr
nix: orepkgs.mr
Most Recently Writtenっぽいの
#+begin_src emacs-lisp :tangle yes
  (mr-mode)
#+end_src
** nix-mode
nix: epkgs.nix-mode
#+begin_src emacs-lisp :tangle yes
  (reformatter-hook nix-mode-hook nix-format
    :program "nixfmt")
  (leaf nix-mode
    :mode
    ("\\.nix$" . nix-mode)
    :bind
    ((nix-mode-map
      ("C-c f" . nix-format-buffer))))
#+end_src
** nyan-mode
nix: epkgs.nyan-mode
#+begin_src emacs-lisp :tangle yes
  (nyan-mode)
  (nyan-start-animation)
#+end_src
** orderless
nix: epkgs.orderless
#+begin_src emacs-lisp :tangle yes
  (setq-default completion-styles '(orderless))
#+end_src
** vertico
nix: epkgs.vertico
#+begin_src emacs-lisp :tangle yes
  (vertico-mode)
#+end_src
