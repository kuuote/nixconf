#+STARTUP: fold
* basic
#+begin_src emacs-lisp :tangle yes
#+end_src
** indent/tab
#+begin_src emacs-lisp :tangle yes
  (setq-default indent-tabs-mode nil)
#+end_src
** repeat-mode
#+begin_src emacs-lisp :tangle yes
  (repeat-mode)
#+end_src
** theme - modus-vivendi
#+begin_src emacs-lisp :tangle yes
  (load-theme 'modus-vivendi t)
#+end_src
** バックアップ系の無効化
#+begin_src emacs-lisp :tangle yes
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq auto-save-list-file-prefix nil)
  (setq create-lockfiles nil)
#+end_src
** 日本語でやっていく
https://hylom.net/2020/11/23/emacs-settings-to-use-japanese-font/ より
#+begin_src emacs-lisp :tangle yes
  (set-language-environment "Japanese")
  (let ((font "Noto Sans Mono CJK JP"))
    (set-frame-font font)
    (add-to-list 'default-frame-alist (cons 'font font)))
#+end_src
** 画面を広くする
テキストエディタが広いことは大事だと思います!
#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
#+end_src
** 起動画面の無効化
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-startup-screen t)
#+end_src
* daemon only
** 色々と遅いのでpreloadしておく
#+begin_src emacs-lisp :tangle yes
  (when (daemonp)
    (with-temp-buffer
      (org-mode)
      (ignore-errors (magit))
      ))
#+end_src
* commands
** indent-buffer
#+begin_src emacs-lisp :tangle yes
  (defun my/indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max))
      (untabify (point-min) (point-max))))
#+end_src
** kill-all-buffers
全バッファを終了する
#+begin_src emacs-lisp :tangle yes
  (defun my/kill-all-buffers ()
    (interactive)
    (mapcar #'kill-buffer (buffer-list)))
#+end_src
* packages
** consult
nix: epkgs.consult
#+begin_src emacs-lisp :tangle yes
  (keymap-global-set "C-c r" #'consult-mrw)
#+end_src
** ddskk
nix: epkgs.ddskk
辞書の設定は.skk.elに記述している
#+begin_src emacs-lisp :tangle yes
  (keymap-global-set "C-x C-j" #'skk-mode)
#+end_src
*** sticky key無いと生きていけない
#+begin_src emacs-lisp :tangle yes
  (setq skk-sticky-key ";")
#+end_src
*** AZIKを使っていく
#+begin_src emacs-lisp :tangle yes
  (setq skk-use-azik t)
  (setq skk-azik-keyboard-type 'us101)
  (add-hook
   'skk-azik-load-hook
   (lambda ()
     ;; 「l」を「っ」にするので「や*っ」のようなパターンを正しく扱うために変換ポイントのパターンに足す
     (setq skk-set-henkan-point-key
           (append '(?L) skk-set-henkan-point-key))
     (let ((my-rules
            '(
              ;; AZIK使用時に";"をsticky-keyにして「っ」を「l」に退避する設定
              (";" nil skk-sticky-set-henkan-point)
              ("l" nil ("ッ" . "っ"))
              ;; 「ん」のshorthandは使わないのでqでカタカナになってほしいし鉤括弧もちゃんと打ててほしい
              ("q" nil skk-toggle-characters)
              ("[" nil "「")
              ;; 「'」で一時解除
              ("'" nil skk-latin-mode)
              )))
       (setq skk-rule-tree
             (skk-compile-rule-list
              skk-rom-kana-base-rule-list
              skk-rom-kana-rule-list
              my-rules)))))
#+end_src
*** ddskk-posframe
nix: epkgs.ddskk-posframe
[[https://emacs-jp.github.io/packages/ddskk-posframe][ddskkツールチップposframeフロントエンド]]
#+begin_src emacs-lisp :tangle yes
  (autoload 'ddskk-posframe-mode "ddskk-posframe")
  (add-hook 'skk-mode-hook #'ddskk-posframe-mode)
#+end_src
** edit-indirect
nix: epkgs.edit-indirect
** embark
nix: epkgs.embark
nix: epkgs.embark-consult
#+begin_src emacs-lisp :tangle yes
  (keymap-global-set "C-." #'embark-act)
#+end_src
** magit
nix: epkgs.magit
*** 全画面でmagitするやつ
[[http://k2nr.me/blog/2014/12/22/emacs-magit.html]]より
#+begin_src emacs-lisp :tangle yes
  (defun my/magit-full ()
    (interactive)
    (window-configuration-to-register :magit-full)
    (magit)
    (delete-other-windows))
  (keymap-global-set "C-c g" #'my/magit-full)
#+end_src
*** 明示的にrefreshした際にsectionの開閉を元に戻す
#+begin_src emacs-lisp :tangle yes
  (defun my/magit-refresh ()
    (interactive)
    (setq magit-section-visibility-cache nil)
    (magit-refresh))
  (add-hook 'magit-status-mode-hook
            (lambda ()
              (define-key magit-status-mode-map (kbd "g") #'my/magit-refresh)))
#+end_src
** mr
nix: orepkgs.mr
Most Recently Writtenっぽいの
#+begin_src emacs-lisp :tangle yes
  (mr-mode)
#+end_src
** nix-mode
nix: epkgs.nix-mode
#+begin_src emacs-lisp :tangle yes
  (autoload 'nix-mode "nix-mode")
  (add-to-list 'auto-mode-alist '("\\.nix$" . nix-mode))
#+end_src
** nyan-mode
nix: epkgs.nyan-mode
#+begin_src emacs-lisp :tangle yes
  (nyan-mode)
  (nyan-start-animation)
#+end_src
** orderless
nix: epkgs.orderless
#+begin_src emacs-lisp :tangle yes
  (setq completion-styles '(orderless))
#+end_src
** vertico
nix: epkgs.vertico
#+begin_src emacs-lisp :tangle yes
  (vertico-mode)
#+end_src
