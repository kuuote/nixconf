#+STARTUP: fold
* package for customize
nix: epkgs.hydra
nix: epkgs.leaf
nix: epkgs.reformatter
* macro for customize
** reformatter
#+begin_src emacs-lisp :tangle yes
  (defmacro reformatter-hook (hook name &rest reformatter-args)
    `(add-hook
      ',hook
      (lambda ()
        (reformatter-define
          ,name
          ,@reformatter-args))))
#+end_src
* basic
#+begin_src emacs-lisp :tangle yes
#+end_src
leaf.elで設定したい
nix: epkgs.leaf
** indent/tab
#+begin_src emacs-lisp :tangle yes
  (setq-default indent-tabs-mode nil)
#+end_src
** org-mode
#+begin_src emacs-lisp :tangle yes
  (defun my/org-mode-restart ()
    (interactive)
    (save-excursion
      (org-mode-restart))
    (org-fold-reveal))

  (leaf org
    :defer-config
    (defhydra
      hydra-org-view ()
      ("TAB" org-cycle)
      ("f" consult-org-heading)
      ("n" outline-next-visible-heading)
      ("p" outline-previous-visible-heading)
      ("j" next-line)
      ("k" previous-line)
      ("r" my/org-mode-restart))
    (defhydra
      hydra-org-shortcuts (org-mode-map "C-;")
      ("h" org-metaleft)
      ("j" org-metadown)
      ("k" org-metaup)
      ("l" org-metaright)
      ("v" hydra-org-view/body :exit t)
      ("s" org-sort)
      ("SPC" (lambda ()
               (interactive)
               (move-end-of-line nil)
               (org-meta-return))))
    )
#+end_src
** theme
#+begin_src emacs-lisp :tangle yes
  (if (or (daemonp) (display-graphic-p))
      (load-theme 'modus-vivendi t)
    (load-theme 'wombat t))
#+end_src
** サクッと実験するために/tmp/init.elがあれば読み込むようにする
壊れてるケースがあるので最後に読むことにする
#+begin_src emacs-lisp :tangle yes
  (leaf init
    :hook
    (emacs-startup-hook
     . (lambda ()
         (when (and (not (daemonp)) (file-readable-p "/tmp/init.el"))
           (load-file "/tmp/init.el")))))
#+end_src
** バックアップ系の無効化
#+begin_src emacs-lisp :tangle yes
  (leaf backup
    :setq ((make-backup-files . nil)
           (auto-save-default . nil)
           (auto-save-list-file-prefix . nil)
           (create-lockfiles . nil)))
#+end_src
** 括弧の補完
#+begin_src emacs-lisp :tangle yes
  (electric-pair-mode)
#+end_src
** 日本語でやっていく
https://hylom.net/2020/11/23/emacs-settings-to-use-japanese-font/ より
#+begin_src emacs-lisp :tangle yes
  (set-language-environment "Japanese")
  (let ((font "Noto Sans Mono CJK JP"))
    (set-frame-font font)
    (add-to-list 'default-frame-alist (cons 'font font)))
#+end_src
** 画面を広くする
テキストエディタが広いことは大事だと思います!
#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
#+end_src
** 起動画面の無効化
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-startup-screen t)
#+end_src
* daemon only
** 色々と遅いのでpreloadしておく
#+begin_src emacs-lisp :tangle yes
  (when (daemonp)
    (with-temp-buffer
      (org-mode)
      (ignore-errors (magit))
      ))
#+end_src
* commands
** indent-buffer
#+begin_src emacs-lisp :tangle yes
  (defun my/indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max))
      (untabify (point-min) (point-max))))
  (leaf my/indent-buffer
    :bind (("C-c i" . my/indent-buffer)))
#+end_src
** kill-all-buffers
全バッファを終了する
#+begin_src emacs-lisp :tangle yes
  (defun my/kill-all-buffers ()
    (interactive)
    (mapcar #'kill-buffer (buffer-list)))
#+end_src
* packages
** consult
nix: epkgs.consult
#+begin_src emacs-lisp :tangle yes
  (keymap-global-set "C-c r" #'consult-mrw)
  ;; isearch中にC-c押したら開始するようにしてみる
  (keymap-set isearch-mode-map "C-c" #'consult-line)
#+end_src
** corfu
nix: epkgs.corfu
nix: epkgs.hotfuzz
[[https://qiita.com/keita44_f4/items/12a4a7081b0092eaca94][このへん]]参考にした
https://github.com/yonta/dotfiles/blob/7c53daf87f78f721919bb3c3cc3a6fcd0a2b2b2d/.config/emacs/lisp/init_package.el#L371
#+begin_src emacs-lisp :tangle yes
  (leaf corfu
    :custom
    (corfu-auto . t)
    (corfu-auto-delay . 0.1)
    (corfu-auto-prefix . 1)
    (corfu-preselect . 'prompt)
    :hook
    (corfu-mode-hook
     . (lambda () (setq-local completion-styles '(hotfuzz))))
    :config
    (global-corfu-mode))
  (require 'corfu)
#+end_src
** ddskk
nix: epkgs.ddskk
辞書の設定は.skk.elに記述している
#+begin_src emacs-lisp :tangle yes
  (leaf ddskk
    :bind (("C-x C-j" . skk-mode)))

  ;; キーリマッパーで変換と無変換を矢印キーにしている
  ;; Macみたいなスタイルで切り替えられるのがベネ
  (keymap-global-set "<left>" (lambda () (interactive) (skk-mode -1)))
  (keymap-global-set "<right>" (lambda () (interactive) (skk-mode 1)))
  ;;; Isearch setting.
  ;; skk-setup.elが無いのでhttps://github.com/skk-dev/ddskk/blob/master/skk-setup.el.inからコピペ
  (defun skk-isearch-setup-maybe ()
    (require 'skk-vars)
    (when (or (eq skk-isearch-mode-enable 'always)
              (and (boundp 'skk-mode)
                   skk-mode
                   skk-isearch-mode-enable))
      (skk-isearch-mode-setup)))

  (defun skk-isearch-cleanup-maybe ()
    (require 'skk-vars)
    (when (and (featurep 'skk-isearch)
               skk-isearch-mode-enable)
      (skk-isearch-mode-cleanup)))

  (add-hook 'isearch-mode-hook #'skk-isearch-setup-maybe)
  (add-hook 'isearch-mode-end-hook #'skk-isearch-cleanup-maybe)
#+end_src
*** sticky key無いと生きていけない
#+begin_src emacs-lisp :tangle yes
  (setq skk-sticky-key ";")
#+end_src
*** AZIKを使っていく
#+begin_src emacs-lisp :tangle yes
  (setq skk-use-azik t)
  (setq skk-azik-keyboard-type 'us101)
  (add-hook
   'skk-azik-load-hook
   (lambda ()
     ;; 「l」を「っ」にするので「や*っ」のようなパターンを正しく扱うために変換ポイントのパターンに足す
     (setq skk-set-henkan-point-key
           (append '(?L) skk-set-henkan-point-key))
     (let ((my-rules
            '(
              ;; AZIK使用時に";"をsticky-keyにして「っ」を「l」に退避する設定
              (";" nil skk-sticky-set-henkan-point)
              ("l" nil ("ッ" . "っ"))
              ;; 「ん」のshorthandは使わないのでqでカタカナになってほしいし鉤括弧もちゃんと打ててほしい
              ("q" nil skk-toggle-characters)
              ("[" nil "「")
              ;; 「'」で一時解除
              ("'" nil skk-latin-mode)
              )))
       (setq skk-rule-tree
             (skk-compile-rule-list
              skk-rom-kana-base-rule-list
              skk-rom-kana-rule-list
              my-rules)))))
#+end_src
*** ddskk-posframe
nix: epkgs.ddskk-posframe
[[https://emacs-jp.github.io/packages/ddskk-posframe][ddskkツールチップposframeフロントエンド]]
#+begin_src emacs-lisp :tangle yes
  (autoload 'ddskk-posframe-mode "ddskk-posframe")
  (add-hook 'skk-mode-hook #'ddskk-posframe-mode)
#+end_src
** embark
nix: epkgs.embark
nix: epkgs.embark-consult
#+begin_src emacs-lisp :tangle yes
  (leaf embark
    :bind
    ("C-." . embark-act)
    :defer-config
    ;; describe-functionの選択中にembarkでfind-functionできるようにする
    (setq embark-symbol-help-map (make-sparse-keymap))
    (keymap-set embark-symbol-help-map "f" 'find-function)
    (add-to-list 'embark-keymap-alist '(symbol-help embark-symbol-help-map)))
#+end_src
** magit
nix: epkgs.magit
*** 全画面でmagitするやつ
[[http://k2nr.me/blog/2014/12/22/emacs-magit.html]]より
#+begin_src emacs-lisp :tangle yes
  (defun my/magit-full ()
    (interactive)
    (window-configuration-to-register :magit-full)
    (magit)
    (delete-other-windows))
  (keymap-global-set "C-c g" #'my/magit-full)
#+end_src
*** 明示的にrefreshした際にsectionの開閉を元に戻す
#+begin_src emacs-lisp :tangle yes
  (defun my/magit-refresh ()
    (interactive)
    (setq magit-section-visibility-cache nil)
    (magit-refresh))
  (add-hook 'magit-status-mode-hook
            (lambda ()
              (define-key magit-status-mode-map (kbd "g") #'my/magit-refresh)))
#+end_src
** mr
nix: orepkgs.mr
Most Recently Writtenっぽいの
#+begin_src emacs-lisp :tangle yes
  (mr-mode)
#+end_src
** nix-mode
nix: epkgs.nix-mode
#+begin_src emacs-lisp :tangle yes
  (autoload 'nix-mode "nix-mode")
  (add-to-list 'auto-mode-alist '("\\.nix$" . nix-mode))
  (reformatter-hook
   nix-mode-hook nix-format
   :program "nixfmt")
#+end_src
** nyan-mode
nix: epkgs.nyan-mode
#+begin_src emacs-lisp :tangle yes
  (nyan-mode)
  (nyan-start-animation)
#+end_src
** orderless
nix: epkgs.orderless
#+begin_src emacs-lisp :tangle yes
  (setq-default completion-styles '(orderless))
#+end_src
** vertico
nix: epkgs.vertico
#+begin_src emacs-lisp :tangle yes
  (vertico-mode)
#+end_src
